defmodule GraSQL.SimpleResolver do
  @moduledoc """
  An example implementation of the SchemaResolver behavior.

  This module provides an example implementations for all SchemaResolver callbacks. DO NOT use this module in production.

  For production applications, it's recommended to implement your own resolver
  to handle your specific database schema.
  """

  @behaviour GraSQL.SchemaResolver

  # Column type mappings for easier lookup
  @text_columns ["description", "content", "body"]
  @status_columns ["status", "state"]
  @password_columns ["password", "password_hash"]
  @varchar_255_columns ["email"]
  @varchar_100_columns ["username"]
  @varchar_200_columns ["title", "name"]

  # Column type mappings using a map for direct lookups
  @column_types %{
    "description" => "TEXT",
    "content" => "TEXT",
    "body" => "TEXT",
    "status" => "VARCHAR(50)",
    "state" => "VARCHAR(50)",
    "password" => "VARCHAR(255)",
    "password_hash" => "VARCHAR(255)",
    "email" => "VARCHAR(255)",
    "username" => "VARCHAR(100)",
    "title" => "VARCHAR(200)",
    "name" => "VARCHAR(200)"
  }

  @impl true
  @doc """
  Resolves a GraphQL field name to a database table.

  Uses the field name as the table name in the "public" schema.

  ## Parameters
    * `field_name` - The GraphQL field name to resolve
    * `_ctx` - Ignored context parameter

  ## Returns
    A %GraSQL.Schema.Table{} struct or nil if the field doesn't map to a table

  ## Examples

      iex> GraSQL.SimpleResolver.resolve_table("users", %{})
      %GraSQL.Schema.Table{schema: "public", name: "users"}

      iex> GraSQL.SimpleResolver.resolve_table("non_table_field", %{})
      nil
  """
  @spec resolve_table(String.t(), map()) :: GraSQL.Schema.Table.t() | nil
  def resolve_table(field_name, _ctx) do
    %GraSQL.Schema.Table{
      schema: "public",
      name: field_name
    }
  end

  @impl true
  @doc """
  Resolves a relationship between a parent table and a field name.

  Uses naming conventions to determine relationships:
  * For 1:N relationships, assumes foreign key is parent_id (e.g., user_id for users table)
  * Table name is assumed to be the field_name

  ## Parameters
    * `field_name` - The GraphQL field name to resolve
    * `parent_table` - The parent table from which the relationship starts
    * `_ctx` - Ignored context parameter

  ## Returns
    A %GraSQL.Schema.Relationship{} struct or nil if no relationship exists

  ## Examples

      iex> parent = %GraSQL.Schema.Table{schema: "public", name: "users"}
      iex> GraSQL.SimpleResolver.resolve_relationship("posts", parent, %{})
      %GraSQL.Schema.Relationship{
        source_table: %GraSQL.Schema.Table{schema: "public", name: "users"},
        target_table: %GraSQL.Schema.Table{schema: "public", name: "posts"},
        source_columns: ["id"],
        target_columns: ["user_id"],
        type: :has_many,
        join_table: nil
      }
  """
  @spec resolve_relationship(String.t(), GraSQL.Schema.Table.t(), map()) ::
          GraSQL.Schema.Relationship.t() | nil
  def resolve_relationship(field_name, parent_table, _ctx) do
    parent_name = parent_table.name

    # Create the singular form of the parent table name
    singular_parent =
      if String.ends_with?(parent_name, "s") do
        String.slice(parent_name, 0, String.length(parent_name) - 1)
      else
        parent_name
      end

    # Assume 1:N relationship with conventional FK naming
    %GraSQL.Schema.Relationship{
      source_table: parent_table,
      target_table: %GraSQL.Schema.Table{
        schema: "public",
        name: field_name
      },
      source_columns: ["id"],
      target_columns: ["#{singular_parent}_id"],
      type: :has_many,
      join_table: nil
    }
  end

  @doc """
  Resolves join table information from a relationship.

  This simple implementation doesn't handle join tables
  and always returns nil.

  ## Parameters
    * `_relationship` - The relationship to check for join table
    * `_ctx` - Ignored context parameter

  ## Returns
    Always returns nil in this simple implementation
  """
  @spec resolve_join_table(GraSQL.Schema.Relationship.t(), map()) ::
          GraSQL.Schema.JoinTable.t() | nil
  def resolve_join_table(_relationship, _ctx) do
    nil
  end

  @impl true
  @doc """
  Resolves the GraphQL __typename for a database table.

  Uses a simple convention: the table name with the first letter capitalized.

  ## Parameters
    * `table` - The resolved database table
    * `_ctx` - Ignored context parameter

  ## Returns
    A string representing the GraphQL type name

  ## Examples

      iex> table = %GraSQL.Schema.Table{schema: "public", name: "users"}
      iex> GraSQL.SimpleResolver.resolve_typename(table, %{})
      "Users"
  """
  @spec resolve_typename(GraSQL.Schema.Table.t(), map()) :: String.t()
  def resolve_typename(%GraSQL.Schema.Table{name: name}, _ctx) do
    # Simple implementation: capitalize the first letter of the table name
    String.capitalize(name)
  end

  @impl true
  @doc """
  Returns a list of column names for a table.

  Provides a simple implementation with common columns for standard tables.

  ## Parameters
    * `table` - The resolved database table
    * `_ctx` - Ignored context parameter

  ## Returns
    A list of column names based on the table name

  ## Examples

      iex> GraSQL.SimpleResolver.resolve_columns(%GraSQL.Schema.Table{name: "users"}, %{})
      ["id", "username", "email", "password_hash", "created_at", "updated_at"]
  """
  @spec resolve_columns(GraSQL.Schema.Table.t(), map()) :: list(String.t())
  def resolve_columns(%GraSQL.Schema.Table{name: "users"}, _ctx) do
    ["id", "username", "email", "password_hash", "created_at", "updated_at"]
  end

  def resolve_columns(%GraSQL.Schema.Table{name: "posts"}, _ctx) do
    ["id", "title", "content", "user_id", "published", "created_at", "updated_at"]
  end

  def resolve_columns(%GraSQL.Schema.Table{name: "comments"}, _ctx) do
    ["id", "content", "user_id", "post_id", "created_at", "updated_at"]
  end

  def resolve_columns(%GraSQL.Schema.Table{name: table_name}, _ctx) do
    # Default columns for any table
    # Add foreign keys based on potential relationships
    ["id", "name", "description", "created_at", "updated_at"] ++
      case table_name do
        "categories" -> ["parent_id"]
        "orders" -> ["user_id", "status"]
        "products" -> ["category_id", "price", "inventory_count"]
        "order_items" -> ["order_id", "product_id", "quantity", "price"]
        _ -> []
      end
  end

  @impl true
  @doc """
  Resolves a specific attribute for a column.

  Handles SQL type and default value based on column name patterns.

  ## Parameters
    * `attribute` - The attribute to resolve (:sql_type, :default_value)
    * `column_name` - The name of the column
    * `table` - The resolved database table containing the column
    * `_ctx` - Ignored context parameter

  ## Returns
    The resolved attribute value

  ## Examples

      iex> table = %GraSQL.Schema.Table{name: "users"}
      iex> GraSQL.SimpleResolver.resolve_column_attribute(:sql_type, "id", table, %{})
      "INTEGER"
  """
  @spec resolve_column_attribute(atom(), String.t(), GraSQL.Schema.Table.t(), map()) :: any()
  def resolve_column_attribute(:sql_type, column_name, _table, _context) do
    sql_type_for_column(column_name)
  end

  def resolve_column_attribute(:default_value, column_name, _table, _context) do
    default_value_for_column(column_name)
  end

  # Private helper functions to determine SQL type
  defp sql_type_for_column("id"), do: "INTEGER"

  defp sql_type_for_column(column_name) when column_name in ["created_at", "updated_at"],
    do: "TIMESTAMP"

  defp sql_type_for_column(column_name) when column_name in ["price", "amount", "cost"],
    do: "DECIMAL(10,2)"

  defp sql_type_for_column(column_name)
       when column_name in ["count", "quantity", "inventory_count"],
       do: "INTEGER"

  defp sql_type_for_column(column_name) when column_name in ["published", "active", "enabled"],
    do: "BOOLEAN"

  defp sql_type_for_column(column_name) do
    cond do
      boolean_column?(column_name) -> "BOOLEAN"
      String.ends_with?(column_name, "_id") -> "INTEGER"
      true -> get_column_type(column_name)
    end
  end

  # Helper to check if a column name indicates a boolean type
  defp boolean_column?(column_name) do
    String.starts_with?(column_name, "is_") or String.starts_with?(column_name, "has_")
  end

  # Helper to get column type from map with default fallback
  defp get_column_type(column_name) do
    Map.get(@column_types, column_name, "VARCHAR(255)")
  end

  # Private helper functions to determine default values
  defp default_value_for_column("id"), do: nil

  defp default_value_for_column(column_name) when column_name in ["created_at", "updated_at"],
    do: "CURRENT_TIMESTAMP"

  defp default_value_for_column(column_name)
       when column_name in ["is_active", "is_enabled", "published", "active", "enabled"],
       do: true

  defp default_value_for_column(column_name)
       when column_name in ["count", "quantity", "inventory_count"],
       do: 0

  defp default_value_for_column(column_name) when column_name in ["price", "amount", "cost"],
    do: 0.0

  defp default_value_for_column(_), do: nil
end
